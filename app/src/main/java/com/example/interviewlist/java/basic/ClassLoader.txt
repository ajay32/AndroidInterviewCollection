


In Java, a class loader is a part of the Java Runtime Environment that dynamically loads Java classes into the Java Virtual Machine (JVM). The class loader plays a crucial role in Java's security model and also in its dynamic, modular architecture. Hereâ€™s a closer look at how class loaders work in Java:

### Types of Class Loaders
1. **Bootstrap Class Loader**: It's the parent of all other class loaders. It loads the core Java APIs located in the `<JAVA_HOME>/jre/lib` directory (or any other directory specified by the `bootclasspath` parameter). It is implemented natively.

2. **Extension Class Loader**: This loader, also known as the platform class loader in Java 9 and above, loads the classes that are an extension of the standard core Java classes. It loads classes from the `<JAVA_HOME>/jre/lib/ext` directory or any other directory specified by the `java.ext.dirs` system property.

3. **System Class Loader**: Also known as the application class loader. It loads classes from the environment variable `CLASSPATH`, which is set to the current directory by default. This is typically where your application classes are loaded from.

### How Class Loaders Work
- **Delegation Model**: Class loaders in Java use a delegation model. When a class loader is asked to load a class, it delegates the task to its parent class loader. If the parent cannot find the class, the class loader itself tries to load the class.

- **Uniqueness**: Each class in Java is identified by the fully qualified name of the class and the class loader instance that loaded it. Therefore, a class can be loaded multiple times in the same JVM if different class loaders load it.

- **Visibility**: A class loaded by a parent class loader is visible to its child class loaders but not vice versa. This means that classes loaded by the child class loader are not visible to the parent loader.

### Uses and Importance
- **Security**: Class loaders isolate the namespaces of Java applications, enabling you to run untrusted code in a secure environment where potentially harmful classes cannot access the internals of the application or the JVM.

- **Dynamic Code Loading**: Class loaders make it possible to load classes dynamically at runtime, which is the basis for many Java features like applets, servlets, and enterprise class applications that can load plugins dynamically.

- **Hot Deployment**: In development and in some production environments, class loaders can be used to reload changed classes without restarting the entire application. This is particularly useful in web servers and application servers.

- **Customization**: Developers can extend the Java class loader to modify the way Java classes are loaded, enabling various custom behaviors like logging, monitoring class loading, applying patches at load time, and enforcing licensing policies.

Understanding how class loaders work and how they can be customized provides a powerful tool in the Java developer's toolkit, enabling both the development of secure, modular applications and the ability to manipulate the class loading process to suit specific needs.

//==================

. What is a classloader?
Classloader is the part of JRE(Java Runtime Environment), during the execution of the bytecode or created .class file classloader is responsible for dynamically loading the java classes and interfaces to JVM(Java Virtual Machine). Because of classloaders Java run time system does not need to know about files and file systems.